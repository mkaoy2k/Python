"""
Snake python game generated by Claude 3.5

這個程式實現了一個經典的蛇遊戲，使用 Pygame 模組來繪製遊戲畫面。
玩家可以使用方向鍵控制蛇的移動，目標是吃到食物讓蛇變長，
同時避免撞到牆壁或自己。
"""

import pygame   # pip install pygame
import random

# Initialize Pygame
pygame.init()

# Set up the game window
width = 800
height = 600
window = pygame.display.set_mode((width, height))
pygame.display.set_caption("Snake Game")

# Colors
black = (0, 0, 0)
white = (255, 255, 255)
red = (255, 0, 0)
green = (0, 255, 0)

# Game settings
snake_block = 20
snake_speed = 15

# Initialize score
score = 0

# Font for displaying score
font_style = pygame.font.SysFont(None, 50)

# Snake class
class Snake:
    def __init__(self):
        self.length = 1
        self.positions = [(width // 2, height // 2)]
        self.color = green
        self.score = 0
        # 初始化方向為 (0, -1) 表示向上
        self.direction = (0, -1)

    def get_head_position(self):
        return self.positions[0]

    def turn(self, point):
        if self.length > 1 and (point[0] * -1, point[1] * -1) == self.direction:
            return
        else:
            self.direction = point

    def move(self):
        cur = self.get_head_position()
        x, y = self.direction
        new = (((cur[0] + (x * snake_block)) % width), (cur[1] + (y * snake_block)) % height)
        if len(self.positions) > 2 and new in self.positions[2:]:
            return False
        else:
            self.positions.insert(0, new)
            if len(self.positions) > self.length:
                self.positions.pop()
            return True

    def reset(self):
        self.length = 1
        self.positions = [(width // 2, height // 2)]
        self.direction = (0, -1)
        self.score = 0

    def draw(self, surface):
        for p in self.positions:
            pygame.draw.rect(surface, self.color, (p[0], p[1], snake_block, snake_block))

# Food class
class Food:
    def __init__(self):
        self.position = (0, 0)
        self.color = red
        self.randomize_position()

    def randomize_position(self):
        self.position = (random.randint(0, (width - snake_block) // snake_block) * snake_block,
                        random.randint(0, (height - snake_block) // snake_block) * snake_block)

    def draw(self, surface):
        pygame.draw.rect(surface, self.color, (self.position[0], self.position[1], snake_block, snake_block))

# Game class
class Game:
    def __init__(self):
        self.snake = Snake()
        self.food = Food()
        self.score = 0

    def run(self):
        clock = pygame.time.Clock()
        game_over = False
        game_close = False

        while not game_over:
            while game_close:
                window.fill(black)
                message = font_style.render("Game Over! Press Q-Quit or C-Play Again", True, white)
                window.blit(message, [width // 3, height // 3])
                pygame.display.update()

                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        game_over = True
                        game_close = False
                    if event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_q:
                            game_over = True
                            game_close = False
                        if event.key == pygame.K_c:
                            self.snake.reset()
                            game_close = False

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    game_over = True
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_LEFT:
                        self.snake.turn((-1, 0))
                    elif event.key == pygame.K_RIGHT:
                        self.snake.turn((1, 0))
                    elif event.key == pygame.K_UP:
                        self.snake.turn((0, -1))
                    elif event.key == pygame.K_DOWN:
                        self.snake.turn((0, 1))

            if self.snake.move():
                if self.snake.get_head_position() == self.food.position:
                    self.snake.length += 1
                    self.score += 10
                    self.food.randomize_position()

            window.fill(black)
            self.snake.draw(window)
            self.food.draw(window)

            # 顯示分數
            score_text = font_style.render(f"Score: {self.score}", True, white)
            window.blit(score_text, [0, 0])

            pygame.display.update()
            clock.tick(snake_speed)

        pygame.quit()

# Start the game
if __name__ == "__main__":
    game = Game()
    game.run()
