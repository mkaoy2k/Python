"""
Python 變數作用域（LEGB）範例

程式功能說明：
1. 展示 Python 的變數範圍層次：
   - Local（區域範圍）：函式內部的變數
   - Enclosing（封閉範圍）：外部函式中的變數
   - Global（全域範圍）：模組層級的變數
   - Built-in（內建範圍）：Python 內建的關鍵字和函式

2. 變數範圍示範：
   - 使用嵌套函數展示不同範圍的變數
   - 使用 nonlocal 關鍵字修改封閉範圍中的變數
   - 展示變數遮蔽現象
   - 測試變數範圍的層次關係

3. 主要特點：
   - 展示局部變數和非局部變數的使用
   - 通過嵌套函數展示變數範圍的層次
   - 使用縮排和註解提高程式可讀性

程式結構：
1. outer() 函式：
   - 外層函數，展示封閉範圍的使用
   - 定義外圍變數 x 和 y
   - 包含一個內層函數 inner()

2. inner() 函式：
   - 內層函數，展示局部變數的使用
   - 使用 nonlocal 關鍵字修改外圍變數
   - 展示變數範圍的層次關係

3. main() 函式：
   - 程式入口點
   - 統籌所有示範
   - 展示模組範圍的概念

使用方法：
1. 執行程式後，會自動展示：
   - 不同範圍之間的變數關係
   - nonlocal 關鍵字的使用
   - 變數範圍的層次變化

注意事項：
- 使用 nonlocal 關鍵字時要考慮變數範圍
- 變數作用域的順序很重要
- 局部變數會遮蔽同名的外圍變數
- 程式使用縮排來顯示不同的範圍層次
"""

def outer():
    """
    外層函數，展示外圍變數範圍的使用
    """
    print('\t 在 outer() 外圍範圍...')
    x = '指派外圍變數 x'
    y = '指派外圍變數 y'

    print(f'\t x = "{x}"')
    print(f'\t y = "{y}"\n')

    def inner():
        """
        內層函數，展示如何使用局部變數和非局部變數
        """
        print('\t\t 在 inner() 局域範圍...')

        # 局部變數 x
        x = 'inner() 指派局域變數 x'
        print(f'\t\t x = "{x}"')

        # 使用 nonlocal 關鍵字宣告外圍變數 y
        print('\t\t 宣告外圍變數 y')
        nonlocal y
        y = 'inner() 指派外圍變數 y'
        print(f'\t\t y = "{y}"\n')

    print('\t 呼叫 inner()...')
    inner()
    print('\t 返回 outer() 外圍範圍...')
    print(f'\t x = "{x}"')
    print(f'\t y = "{y}"')

def main():
    """
    主函數，程式入口點
    """
    print('在主程式模組範圍...')
    print('呼叫 outer()...')
    outer()
    print('返回主程式模組範圍...')
    print('結束主程式模組範圍...')

if __name__ == "__main__":
    main()
